<Type Name="IRibbonControl" FullName="Microsoft.Office.Core.IRibbonControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="68773fd86e42dc3132be028386c9b8eeaf465f51" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20663469" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonControl" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonControl" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C0395-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="19165-101">Representa el objeto pasado al procedimiento de devolución de llamada de cada cinta de opciones (interfaz) del control del usuario.</span>
      <span class="sxs-lookup">
        <span data-stu-id="19165-101">Represents the object passed into every Ribbon user interface (UI) control's callback procedure.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="19165-102">
        <para>El objeto <b>IRibbonControl</b> contiene el nombre (identificador) del control y del objeto <b>Window</b> actual para el control de la interfaz de usuario de la cinta de opciones.</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="19165-102">
          <para>The <b>IRibbonControl</b> object  contains the name (ID) of the control and the current <b>Window</b> object for the Ribbon UI control.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="19165-103">
        <para>El ejemplo siguiente, escrito en C#, muestra dos procedimientos llamados desde el procedimiento de evento <b>onAction</b> de un control Button y un control ToggleButton. En el primer procedimiento, el objeto <b>IRibbonControl</b> que representa el control se pasa al procedimiento y se muestra un cuadro de mensaje que indica que se ha presionado el botón junto con el identificador del botón. El segundo procedimiento es similar al primero con la adición de un parámetro <b>Boolean</b> que indica que se ha presionado el botón.</para>
        <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="19165-103">
          <para>The following example, written in C#,  shows two procedures called from the <b>onAction</b> event procedure  of a Button control and a ToggleButton control. In the first procedure, the <b>IRibbonControl</b> object representing the control is passed into the procedure and a message box is displayed indicating that the button was pressed along with the ID of the button. The second procedure is similar to the first with the addition of a <b>Boolean</b> parameter indicating that the button was pressed.</para>
          <code>&lt;span class="label"&gt;public void ButtonOnAction(IRibbonControl control) 
   MessageBox.Show("Button clicked: " + control.Id); 
} 
 
public void ToggleButtonOnAction(IRibbonControl control, bool pressed) 
{ 
 
 
...if (pressed) 
 
      MessageBox.Show("ToggleButton was switched on."); 
 
 
   else 
      MessageBox.Show("ToggleButton was switched off."); 
 
}&lt;/span&gt;</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public object Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Context" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Context" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Context As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Context { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="19165-p101">Representa la ventana activa que contiene la interfaz de usuario de extensibilidad de la cinta de opciones que provoca un procedimiento de devolución de llamada. Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-p101">Represents the active window containing the Ribbon user interface that triggers a callback procedure. Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="19165-106">Objeto</span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-106">Object</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="19165-p102">Obtiene el identificador del control especificado en el archivo de personalización de código XML de extensibilidad de la cinta de opciones. Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-p102">Gets the ID of the control specified in the Ribbon XML markup customization file. Read-only.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="19165-109">String</span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-109">String</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public string Tag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Tag" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Office.Core.IRibbonControl.Tag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Tag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Tag { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="19165-p103">Se utiliza para guardar cadenas arbitrarias y obtenerlas en tiempo de ejecución. Sólo lectura.</span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-p103">Used to store arbitrary strings and fetch them at runtime. Read-only</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="19165-112">String</span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-112">String</span>
          </span>
        </value>
        <remarks>
          <span data-ttu-id="19165-113">
            <para>Normalmente puede distinguir entre los controles en un archivo de personalización del XML de la interfaz de usuario de la cinta de opciones mediante la propiedad <b>Id</b> . Sin embargo, existen restricciones sobre lo que pueden contener los identificadores (sin caracteres no alfanuméricos y deben ser únicos).  La propiedad <b>Tag</b> no tiene estas restricciones y se puede usar en las situaciones siguientes, donde el identificador no funciona:</para>
            <list type="bullet">
              <item>
                <para>Si necesita para almacenar una cadena especial con el control como un nombre de archivo.  Por ejemplo: tag="C:\path\file.xlsm."</para>
              </item>
              <item>
                <para>Si desea que varios controles se tratan de la misma forma por los procedimientos de devolución de llamada, pero no desea mantener una lista de todos sus identificadores (que deben ser únicos).  Por ejemplo, podría tener botones en distintas fichas de la cinta de opciones con tag = "blue" y, a continuación, comprobar sólo la propiedad <b>Tag</b> en lugar de la propiedad <b>ID</b> al realizar operaciones comunes.</para>
              </item>
            </list>
            <para />
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-113">
              <para>Normally you can distinguish between controls in a Ribbon user interface XML customization file using the <b>Id</b> property. However, there are restrictions on what IDs can contain (no non-alphanumeric characters, and they must all be unique).  The <b>Tag</b> property doesn’t have these restrictions and so it can be used in the following situations, where ID doesn’t work:</para>
              <list type="bullet">
                <item>
                  <para>If you need to store a special string with your control such as a filename.  For example: tag=”C:\path\file.xlsm.”</para>
                </item>
                <item>
                  <para>If you want multiple controls to be treated the same way by your callback procedures, but you don’t want to maintain a list of all of their IDs (which must be unique).  For example, you could have buttons on different tabs on the Ribbon, all with tag=”blue”, and then just check the <b>Tag</b> property instead of the <b>ID</b> property when perfroming some common action.</para>
                </item>
              </list>
              <para />
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="19165-114">
            <para>En el XML que se usa para personalizar la interfaz de usuario de la cinta de opciones, puede establecer una etiqueta de la siguiente manera. Cuando se llama a la acción MyFunction, puede leer la propiedad <b>Tag</b> , que será igual a "una cadena".</para>
            <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="19165-114">
              <para>In the  XML used to customize the Ribbon user interface, you can set a tag as follows. When the MyFunction action is called, you can read the <b>Tag</b> property, which will be equal to “some string”. </para>
              <code>&lt;span class="label"&gt;&amp;lt;button id=”mybutton” tag=”some string” onAction=”MyFunction”/&amp;gt;&lt;/span&gt;</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>