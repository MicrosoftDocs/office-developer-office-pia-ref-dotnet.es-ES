<Type Name="IRibbonUI" FullName="Microsoft.Office.Core.IRibbonUI">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f912fe8c8db15a87c031bae5d14f2fe64d719567" />
    <Meta Name="ms.sourcegitcommit" Value="f41bc3cdd2c00b9a51a4340ac823a9e309633924" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="es-ES" />
    <Meta Name="ms.lasthandoff" Value="07/19/2018" />
    <Meta Name="ms.locfileid" Value="20663172" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IRibbonUI" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IRibbonUI" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Office.Core.IRibbonUI" />
  <TypeSignature Language="VB.NET" Value="Public Interface IRibbonUI" />
  <TypeSignature Language="C++ CLI" Value="public interface class IRibbonUI" />
  <AssemblyInfo>
    <AssemblyName>office</AssemblyName>
    <AssemblyVersion>15.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("000C03A7-0000-0000-C000-000000000046")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibType(4160)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="91de9-p101">El objeto devuelto por el procedimiento <b>onLoad</b> especificado en la etiqueta <b>customUI</b>. El objeto contiene métodos para invalidar las propiedades de control y para actualizar la interfaz de usuario.</span>
      <span class="sxs-lookup">
        <span data-stu-id="91de9-p101">The object that is returned by the <b>onLoad</b> procedure specified on the <b>customUI</b> tag.  The object contains methods for invalidating control properties and for refreshing the user interface.</span>
      </span>
    </summary>
    <remarks>
      <span data-ttu-id="91de9-103">
        <para>Puede personalizar la interfaz de usuario (UI) de la cinta de opciones mediante procedimientos de devolución de llamada en complementos COM. Cuando se inicia la aplicación host, se llama al procedimiento de devolución de llamada de <b>onLoad</b> .  El procedimiento de devolución de llamada, a continuación, devuelve un objeto <b>IRibbonUI</b> que señala a la interfaz de usuario (UI). Puede utilizar dicho objeto para invocar los métodos <b>Invalidate</b>, <b>InvalidateControl</b>y <b>Refresh</b> .</para>
        <para />
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="91de9-103">
          <para>You can customize the Ribbon user interface (UI) by using callback procedures in COM add-ins. When the host application starts, the <b>onLoad</b> callback procedure is called.  The callback procedure then returns a <b>IRibbonUI</b> object pointing to the user interface (UI). YOu can use that object to invoke the <b>Invalidate</b>, <b>InvalidateControl</b>, and <b>Refresh</b> methods.</para>
          <para />
        </span>
      </span>
    </remarks>
    <example>
      <span data-ttu-id="91de9-104">
        <para>En el ejemplo siguiente, al iniciar la aplicación host desencadena el procedimiento de evento <b>onLoad</b> que, a continuación, llama a un procedimiento que crea un objeto <b>IRibbonUI</b> que representa la interfaz de usuario de la cinta de opciones.  A continuación, se define un procedimiento de devolución de llamada que invalida todos los controles almacenados en caché y, a continuación, actualiza la interfaz de usuario.</para>
        <para>Lo siguiente muestra el marcado XML para Office cargar la cinta de opciones personalizada:</para>
        <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
        <para>Lo siguiente es el método de devolución de llamada para el evento <b>onLoad</b> :</para>
        <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="91de9-104">
          <para>In the following example, starting the host application triggers the <b>onLoad</b> event procedure  that then calls a procedure which creates a <b>IRibbonUI</b> object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the cached controls and then refreshes the UI.</para>
          <para>The following is the XML markup for Office to load the custom ribbon:</para>
          <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
          <para>The following is the callback method for the <b>onLoad</b> event:</para>
          <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
        </span>
      </span>
    </example>
  </Docs>
  <Members>
    <Member MemberName="ActivateTab">
      <MemberSignature Language="C#" Value="public void ActivateTab (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTab([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTab(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTab (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTab(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(4)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="91de9-105">Especifica el identificador de la ficha de la cinta de opciones personalizada que se va a activar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-105">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="91de9-106">Activa la ficha personalizada que se especificó.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-106">Activates the specified custom tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabMso">
      <MemberSignature Language="C#" Value="public void ActivateTabMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(5)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="91de9-107">Especifica el identificador de la ficha de la cinta de opciones personalizada que se va a activar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-107">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="91de9-108">Activa la ficha integrada especificada.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-108">Activates the specified built-in tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateTabQ">
      <MemberSignature Language="C#" Value="public void ActivateTabQ (string ControlID, string Namespace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ActivateTabQ([in]string ControlID, [in]string Namespace) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.ActivateTabQ(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ActivateTabQ (ControlID As String, Namespace As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ActivateTabQ(System::String ^ ControlID, System::String ^ Namespace);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(6)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
        <Parameter Name="Namespace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="91de9-109">Especifica el identificador de la ficha de la cinta de opciones personalizada que se va a activar.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-109">Specifies the identifier of the custom Ribbon tab to be activated.</span>
          </span>
        </param>
        <param name="Namespace">
          <span data-ttu-id="91de9-110">Especifica el espacio de nombres del elemento de la ficha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-110">Specifies the namespace of the tab element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="91de9-111">Activa la ficha personalizada que se especificó en la interfaz de usuario de cinta de Microsoft Office Fluent.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-111">Activates the specified custom tab on the Microsoft Office Fluent Ribbon UI.</span>
          </span>
          <span data-ttu-id="91de9-112">Usa el nombre completo de la ficha que incluye el identificador y el espacio de nombres de la ficha.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-112">Uses the fully qualified name of the tab which includes the identifier and the namespace of the tab.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.Invalidate" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invalidate ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invalidate();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="91de9-113">Invalida los valores almacenados en caché para todos los controles de la interfaz de usuario de la cinta de opciones.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-113">Invalidates the cached values for all of the controls of the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="91de9-114">
            <para>Puede personalizar la interfaz de usuario de la cinta de opciones mediante procedimientos de devolución de llamada en complementos COM. Para cada una de las implementa las devoluciones de llamada en la, se almacenan en caché las respuestas.  Por ejemplo, si un escritor de complemento implementa el procedimiento de devolución de llamada <b>getImage</b> para un botón, la función se llama una vez, se carga la imagen y, a continuación, si es necesario actualizar la imagen, se utiliza la imagen almacenada en caché en lugar de recuperar el procedimiento. Este proceso permanece en el lugar hasta que el complemento señala que los valores almacenados en caché son válidos mediante el método <b>Invalidate</b> , en qué momento, vuelva a se llama al procedimiento de devolución de llamada y la respuesta devuelta se almacena en caché.  El complemento puede forzar una actualización inmediata de la interfaz de usuario llamando al método <b>Refresh</b> .</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-114">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place until the add-in signals that the cached values are invalid by using the <b>Invalidate</b> method,  at which time, the callback procedure is again called and the return response is cached.  The add-in can then force an immediate update of the UI by calling the <b>Refresh</b> method.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="91de9-115">
            <para>En el ejemplo siguiente, al iniciar la aplicación host desencadena el procedimiento de evento <b>onLoad</b> que, a continuación, llama a un procedimiento que crea un objeto que representa la interfaz de usuario de la cinta de opciones.  A continuación, se define un procedimiento de devolución de llamada que invalida todos los controles de la interfaz de usuario y, a continuación, actualiza la interfaz de usuario.</para>
            <para>Lo siguiente muestra el marcado XML para Office cargar la cinta de opciones personalizada:</para>
            <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
            <para>Lo siguiente es el método de devolución de llamada para el evento <b>onLoad</b> :</para>
            <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-115">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event  procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates all of the controls on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the caches of all of this add-in’s controls 
    MyRibbon.Invalidate()            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControl">
      <MemberSignature Language="C#" Value="public void InvalidateControl (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControl([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControl(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControl (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControl(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="91de9-116">Especifica el identificador del control que se invalidará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-116">Specifies the ID of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="91de9-117">Invalida el valor almacenado en caché de un control único en la interfaz de usuario de la cinta de opciones.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-117">Invalidates the cached value for a single control on the Ribbon user interface.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="91de9-118">
            <para>Puede personalizar la interfaz de usuario de la cinta de opciones mediante procedimientos de devolución de llamada en complementos COM. Para cada una de las implementa las devoluciones de llamada en la, se almacenan en caché las respuestas.  Por ejemplo, si un escritor de complemento implementa el procedimiento de devolución de llamada <b>getImage</b> para un botón, la función se llama una vez, se carga la imagen y, a continuación, si es necesario actualizar la imagen, se utiliza la imagen almacenada en caché en lugar de recuperar el procedimiento. Este proceso permanece local para el control hasta que el complemento señala que los valores almacenados en caché son válidos mediante el método <b>InvalidateControl</b> , en qué momento vuelve a llamarse el procedimiento de devolución de llamada y la respuesta devuelta se almacena en caché.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-118">
              <para>You can customize the Ribbon UI by using callback procedures in COM add-ins. For each of the callbacks the add-in implements, the responses are  cached.  For example, if an add-in writer implements the <b>getImage</b> callback procedure for a button, the function is  called once, the image loads, and then if the image needs to be updated, the cached image is used instead of recalling the procedure. This process remains in-place for the control until the add-in signals that the cached values are invalid by using the <b>InvalidateControl</b> method,  at which time, the callback procedure is again called and the return response is cached.</para>
              <para />
            </span>
          </span>
        </remarks>
        <example>
          <span data-ttu-id="91de9-119">
            <para>En el ejemplo siguiente, al iniciar la aplicación host desencadena el procedimiento de evento <b>onLoad</b> que, a continuación, llama a un procedimiento que crea un objeto que representa la interfaz de usuario de la cinta de opciones.  A continuación, se define un procedimiento de devolución de llamada que invalida un control de la interfaz de usuario y, a continuación, actualiza la interfaz de usuario.</para>
            <para>Lo siguiente muestra el marcado XML para Office cargar la cinta de opciones personalizada:</para>
            <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
            <para>Lo siguiente es el método de devolución de llamada para el evento <b>onLoad</b> :</para>
            <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-119">
              <para>In the following example,  starting the host application triggers the <b>onLoad</b> event procedure that then calls a procedure which creates an object representing the Ribbon UI.  Next, a callback procedure is defined that invalidates a control on the UI and then refreshes the UI.</para>
              <para>The following is the XML markup for Office to load the custom ribbon:</para>
              <code>&amp;lt;customUI … onLoad=”MyAddInInitialize” …&amp;gt;</code>
              <para>The following is the callback method for the <b>onLoad</b> event:</para>
              <code>Dim MyRibbon As IRibbonUI
Sub MyAddInInitialize(Ribbon As IRibbonUI)
    Set MyRibbon = Ribbon
End Sub

Sub myFunction()
    ‘ Invalidates the cache of a single control 
    MyRibbon.InvalidateControl(“control5”)            
End Sub</code>
            </span>
          </span>
        </example>
      </Docs>
    </Member>
    <Member MemberName="InvalidateControlMso">
      <MemberSignature Language="C#" Value="public void InvalidateControlMso (string ControlID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateControlMso([in]string ControlID) runtime managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Office.Core.IRibbonUI.InvalidateControlMso(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InvalidateControlMso (ControlID As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InvalidateControlMso(System::String ^ ControlID);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>office</AssemblyName>
        <AssemblyVersion>15.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.DispId(3)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ControlID" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ControlID">
          <span data-ttu-id="91de9-120">Especifica el identificador del control que se invalidará.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-120">Specified the identifier of the control that will be invalidated.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="91de9-121">Se usa para invalidar un control integrado.</span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-121">Used to invalidate a built-in control.</span>
          </span>
        </summary>
        <remarks>
          <span data-ttu-id="91de9-122">
            <para>Invalidar un control vuelve a pintar la pantalla y hace que los procedimientos de devolución de llamada asociados a un control para que se ejecute.</para>
            <para />
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="91de9-122">
              <para>Invalidating a control repaints the screen and causes any callback procedures associated with that control to run.</para>
              <para />
            </span>
          </span>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>